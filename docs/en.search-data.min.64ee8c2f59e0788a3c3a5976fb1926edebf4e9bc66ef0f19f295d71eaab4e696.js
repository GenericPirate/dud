'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/dud/benchmarks/','title':"Benchmarks",'section':"",'content':"Benchmarks #  OS: Linux 5.10.12-arch1-1 x86_64 GNU/Linux\nCPU: Intel(R) Core(TM) i3-7100 CPU @ 3.90GHz\nRAM: 16 GB\nFew Large Files #  This dataset consists of four 1 GB files in a single directory.\ncommit #     Command Mean [s] Min [s] Max [s] Relative     Dud 0.774 ± 0.006 0.767 0.777 1.00   DVC 3.933 ± 0.057 3.877 3.990 5.08 ± 0.08    Many small files #  This dataset consists of twenty thousand 100 KB files in a single directory.\ncommit #     Command Mean [s] Min [s] Max [s] Relative     Dud 1.603 ± 0.070 1.540 1.679 1.00   DVC 16.046 ± 0.025 16.030 16.074 10.01 ± 0.44    "});index.add({'id':1,'href':'/dud/getting_started/wine/','title':"Wine",'section':"Getting Started",'content':"Training a Decision Tree Classifier #  In this tutorial we will use sklearn to train and validate a simple wine classifier using the wine quality data set. We will use dud to track the data and version the model weights.\nEnvironment Setup #  We will first need to install dud which requires go to be in your PATH. The preferred method to install dud right now is to clone the repo and run make install.\n$ git clone https://github.com/kevin-hanselman/dud $ cd dud \u0026amp;\u0026amp; make install \u0026amp;\u0026amp; cd ../  We can verify that dud installed correctly by outputting the version.\n$ dud version  We will be using python and the sklearn and pandas packages to train our classifier. To manage python packages, we recommend that you first install a python virtual environment.\n$ python -m venv .env !source .env/bin/activate  We can then install the python packages we need.\n$ pip install scikit-learn pandas --user  Now that we have dud installed and all of our python packages installed, let\u0026rsquo;s make a new directory for our work.\n$ mkdir wine_classifier \u0026amp;\u0026amp; cd wine_classifier  Before we add any data, let\u0026rsquo;s initialize a dud repo.\n$ dud init  This creates a .dud folder in the current folder and populates it with some config files that have sensible defaults. A .dud/cache folder is also created, but it\u0026rsquo;s empty for now.\nLet\u0026rsquo;s verify that the above is true.\n$ tree .dud  Now we\u0026rsquo;re ready to add some data.\nAdding Data #  We will be using the \u0026ldquo;Wine Quality Data Set\u0026rdquo; from the UCI Machine Learning Repository, which we can download easily with wget. If you\u0026rsquo;re unfamiliar with wget, all you need to know is that this command downloads a couple CSVs and saves them in the data folder. The command is shown below.\nwget -q -r -np -nd -A csv https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/ -P data  We can first make the data directory where we will download the dataset.\n$ mkdir data/  We can then create a dud stage to run the above command for us. A group of files or directories are known to dud as \u0026ldquo;artifacts\u0026rdquo;. A stage is just a collection or an operation on a collection of artifacts. A stage can be defined by a YAML file, and can be tracked with source control.\ndud provides an easy way to generate stages, although stages can always be created and edited manually.\n$ dud stage gen  A -o flag indicates that the stage will generate an artifact. We want to tell dud that our command will generate the data directory so that it knows to track it as an artifact.\n$ dud stage gen -o data/  We also want to tell dud how the artifact is generated. We can use the wget command from above. We use also use -- which in bash means to stop parsing flags. This is needed so that dud doesn\u0026rsquo;t try and parse the wget flags!\n$ dud stage gen -o data/ -- wget -q -r -np -nd -A csv https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/ -P data  It looks like this has all of the information we need! However, we haven\u0026rsquo;t actually saved the output stage to a file yet. We can use \u0026ldquo;\u0026gt;\u0026rdquo; to redirect dud\u0026rsquo;s autogenerated stage to a YAML file.\n$ dud stage gen -o data/ -- wget -q -r -np -nd -A csv https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/ -P data \u0026gt; get_data.yaml  When we add a stage to dud, we\u0026rsquo;re just letting dud know that a stage exists. This is kept track in an index file.\n$ cat .dud/index  Let\u0026rsquo;s tell dud to track that stage and check the index file and the status.\n$ dud stage add get_data.yaml $ cat .dud/index $ dud status  Notice that the stage hasn\u0026rsquo;t been checksummed, but that dud is aware of the data artifact and knows that it is uncommitted. In fact, it is a design decision for dud to wait to commit until you tell it to. This is because the commit operation is one of the most costly operations since it involves lots of hashing. Let\u0026rsquo;s fix that by running the stage and committing the output.\n$ dud run get_data.yaml $ dud commit get_data.yaml $ dud status  Excellent! Remember how the cache was empty before? You\u0026rsquo;ll find that after the commit, the cache is no longer empty.\n$ tree .dud  Those content-addressed files in the cache corespond to the data in the data folder. By default, dud symlinks the files in the working directory to point to the files in the cache.\nThe files in the cache are important because that\u0026rsquo;s where the real copy of the file lives. dud tries to protect you from monkeying around with those cache files.\n$ ls -l .dud/cache/3f/89718d7db7e8983db992bbe63b63c912b510aa279eef55fd6927f98a4a72f5  You can see that the this cache file has file permissions \u0026ldquo;-r\u0026ndash;r\u0026ndash;r\u0026ndash;\u0026rdquo; which means that the file has read-only permissions.\ndud also tries to protect us from mishaps in our working directory. What if, through some freak accident, we delete our data folder? Since we committed, dud has us covered.\n$ ls $ rm -r data/ $ ls  No worries! We can simply recover the folder back to the working directory with a dud checkout.\n$ dud checkout get_data.yaml $ ls  As another protection, dud will refuse to run as root.\n$ sudo dud status  Training a Decision Tree Classifier #  Here\u0026rsquo;s an example of a quick script to train a decision tree using scikit-learn on the wine dataset which saves the output model to a pickle file. Save this as train.py.\n# train.py import pickle import pandas as pd from sklearn import tree from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score red_wine = pd.read_csv(\u0026#39;data/winequality-red.csv\u0026#39;, sep=\u0026#39;;\u0026#39;) X_train, X_test, y_train, y_test = train_test_split( red_wine[[\u0026#39;sulphates\u0026#39;, \u0026#39;alcohol\u0026#39;]], red_wine[\u0026#39;quality\u0026#39;], test_size=0.25, random_state=0) clf = tree.DecisionTreeClassifier().fit(X_train, y_train) print(f\u0026#39;Training Accuracy {round(accuracy_score(y_train, clf.predict(X_train)) * 100, 2)}%\u0026#39;) print(f\u0026#39;Testing Accuracy {round(accuracy_score(y_test, clf.predict(X_test)) * 100, 2)}%\u0026#39;) with open(\u0026#39;dt.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: pickle.dump(clf, f) Let\u0026rsquo;s use the same technique as our get_data.yaml stage, but use the -d flag to tell dud that the data/ and train.py are dependencies of the this stage.\n$ dud stage gen -d data/ -d train.py -o dt.pkl python train.py \u0026gt; train.yaml $ dud stage add train.yaml $ dud st  We can then train the model with dud run.\n$ dud run train.yaml $ dud st  As before, we can commit whenever we\u0026rsquo;re ready.\n$ dud commit  "});index.add({'id':2,'href':'/dud/getting_started/tour/','title':"A Tour of Dud",'section':"Getting Started",'content':"A Tour of Dud #  Create a project.\n$ mkdir ~/cifar \u0026amp;\u0026amp; cd ~/cifar $ dud init  Add some data and tell Dud to track it.\n$ curl -sSO https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz $ dud stage gen -o cifar-10-python.tar.gz | tee cifar.yaml $ dud stage add cifar.yaml $ dud status  Commit the data to the Dud cache.\n$ dud commit $ cat cifar.yaml $ dud status $ tree -an  Add a stage to extract the data.\n$ mkdir cifar-10-batches-py $ dud stage gen \\ -d cifar-10-python.tar.gz \\ -o cifar-10-batches-py/ \\ -- tar -xvf cifar-10-python.tar.gz \\ | tee extract_cifar.yaml $ dud stage add extract_cifar.yaml  Run our pipeline and commit the results.\n$ dud run $ dud status $ dud commit  Notice that Dud detected the tarball from cifar.yaml was up-to-date and did not copy any data.\n$ dud status  Visualize the pipeline using Graphviz.\n$ dud graph | dot -Tpng -o pipeline.png  "});index.add({'id':3,'href':'/dud/cli/dud/','title':"dud",'section':"CLI Reference",'content':"dud #  Synopsis #  Dud is a tool for storing, versioning, and reproducing large files alongside source code.\nOptions #   -h, --help help for dud --profile enable profiling --trace enable tracing SEE ALSO #   dud checkout\t- Load committed artifacts from the cache dud checksum\t- Checksum files or bytes from STDIN dud commit\t- Save artifacts to the cache and record their checksums dud completion\t- Generate shell completion script dud config\t- Print or modify fields in the config file dud fetch\t- Fetch committed artifacts from the remote cache dud graph\t- Print the stage graph in graphviz DOT format dud init\t- Initialize a Dud project dud push\t- Push committed artifacts to the remote cache dud run\t- Run stages or pipelines dud stage\t- Commands for interacting with stages and the index dud status\t- Print the state of one or more stages dud version\t- Print version and exit  "});index.add({'id':4,'href':'/dud/cli/dud_checkout/','title':"dud checkout",'section':"CLI Reference",'content':"dud checkout #  Load committed artifacts from the cache\nSynopsis #  Checkout loads previously committed artifacts from the cache.\nFor each stage file passed in, checkout attempts to load all output artifacts from the cache for the given. If no stage files are passed in, checkout will act on all stages in the index. By default, checkout will act recursively on all upstream stages (i.e. dependencies).\ndud checkout [flags] [stage_file]... Options #   -c, --copy copy artifacts instead of linking -h, --help help for checkout -s, --single-stage don't recursively operate on dependencies Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});index.add({'id':5,'href':'/dud/cli/dud_checksum/','title':"dud checksum",'section':"CLI Reference",'content':"dud checksum #  Checksum files or bytes from STDIN\nSynopsis #  Checksum reads files (or bytes from STDIN) and prints their checksums.\nThe CLI is intended to be compatible with the *sum family of command-line tools (although this version is currently incomplete).\ndud checksum [flags] [file]... Options #   -b, --bufsize int internal buffer size in bytes -h, --help help for checksum Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});index.add({'id':6,'href':'/dud/cli/dud_commit/','title':"dud commit",'section':"CLI Reference",'content':"dud commit #  Save artifacts to the cache and record their checksums\nSynopsis #  Commit saves artifacts to the cache and record their checksums.\nFor each stage file passed in, commit saves all output artifacts in the cache and records their checksums in a stage lock file. If no stage files are passed in, commit will act on all stages in the index. By default, commit will act recursively on all upstream stages (i.e. dependencies).\ndud commit [flags] [stage_file]... Options #   -c, --copy On checkout, copy the file instead of linking. -h, --help help for commit Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});index.add({'id':7,'href':'/dud/cli/dud_completion/','title':"dud completion",'section':"CLI Reference",'content':"dud completion #  Generate shell completion script\nSynopsis #  Completion generates a completion script for the given shell.\nBash #  $ source \u0026lt;(dud completion bash)  To load completions for each session, execute once:\nOn Linux:\n$ dud completion bash \u0026gt; /etc/bash_completion.d/dud  On MacOS:\n$ dud completion bash \u0026gt; /usr/local/etc/bash_completion.d/dud  Zsh #  If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:\n$ echo \u0026quot;autoload -U compinit; compinit\u0026quot; \u0026gt;\u0026gt; ~/.zshrc  To load completions for each session, execute once:\n$ dud completion zsh \u0026gt; \u0026quot;${fpath[1]}/_dud\u0026quot;  You will need to start a new shell for this setup to take effect.\nFish #  $ dud completion fish | source  To load completions for each session, execute once:\n$ dud completion fish \u0026gt; ~/.config/fish/completions/dud.fish  dud completion {bash|zsh|fish} Options #   -h, --help help for completion Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});index.add({'id':8,'href':'/dud/cli/dud_config/','title':"dud config",'section':"CLI Reference",'content':"dud config #  Print or modify fields in the config file\nSynopsis #  Config prints or modifies fields in the config file\nOptions #   -h, --help help for config Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t- dud config get\t- Get the value of a field in the config file dud config set\t- Set the value of a field in the config file  "});index.add({'id':9,'href':'/dud/cli/dud_config_get/','title':"dud config get",'section':"CLI Reference",'content':"dud config get #  Get the value of a field in the config file\nSynopsis #  Get the value of a field in the config file\ndud config get config_field [flags] Options #   -h, --help help for get Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud config\t- Print or modify fields in the config file  "});index.add({'id':10,'href':'/dud/cli/dud_config_set/','title':"dud config set",'section':"CLI Reference",'content':"dud config set #  Set the value of a field in the config file\nSynopsis #  Set the value of a field in the config file\ndud config set config_field new_value [flags] Options #   -h, --help help for set Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud config\t- Print or modify fields in the config file  "});index.add({'id':11,'href':'/dud/cli/dud_fetch/','title':"dud fetch",'section':"CLI Reference",'content':"dud fetch #  Fetch committed artifacts from the remote cache\nSynopsis #  Fetch downloads previously committed artifacts from a remote cache.\nFor each stage passed in, fetch downloads the stage\u0026rsquo;s committed outputs from the remote cache specified in the Dud config file. If no stage files are passed in, fetch will act on all stages in the index. By default, fetch will act recursively on all upstream stages (i.e. dependencies).\ndud fetch [flags] [stage_file]... Options #   -h, --help help for fetch -s, --single-stage don't recursively operate on dependencies Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});index.add({'id':12,'href':'/dud/cli/dud_graph/','title':"dud graph",'section':"CLI Reference",'content':"dud graph #  Print the stage graph in graphviz DOT format\nSynopsis #  Graph prints the stage graph in graphviz DOT format.\nFor each stage file passed in, graph will print the graph of the stage and all upstream stages. If no stage files are passed in, graph will act on all stages in the index.\nYou can pipe the output of this command to \u0026lsquo;dot\u0026rsquo; from the graphviz package to generate images of the stage graph.\ndud graph [flags] [stage_file]... Examples #  dud graph | dot -Tpng -o dud.png Options #   -h, --help help for graph --stages-only only show stages; no artifacts Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});index.add({'id':13,'href':'/dud/cli/dud_init/','title':"dud init",'section':"CLI Reference",'content':"dud init #  Initialize a Dud project\nSynopsis #  Init initializes a Dud project in the current directory.\ndud init [flags] Options #   -h, --help help for init Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});index.add({'id':14,'href':'/dud/cli/dud_push/','title':"dud push",'section':"CLI Reference",'content':"dud push #  Push committed artifacts to the remote cache\nSynopsis #  Push uploads previously committed artifacts to a remote cache.\nFor each stage passed in, push uploads the stage\u0026rsquo;s committed outputs to the remote cache specified in the Dud config file. If no stage files are passed in, push will act on all stages in the index. By default, push will act recursively on all upstream stages (i.e. dependencies).\ndud push [flags] [stage_file]... Options #   -h, --help help for push -s, --single-stage don't recursively operate on dependencies Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});index.add({'id':15,'href':'/dud/cli/dud_run/','title':"dud run",'section':"CLI Reference",'content':"dud run #  Run stages or pipelines\nSynopsis #  Run runs stages or pipelines.\nFor each stage passed in, run executes a stage\u0026rsquo;s command if it is out-of-date. If no stage files are passed in, run will act on all stages in the index. By default, run will act recursively on all upstream stages (i.e. dependencies), and thus run will execute a stage\u0026rsquo;s command if any upstream stages are out-of-date.\ndud run [flags] [stage_file]... Options #   -h, --help help for run -s, --single-stage don't recursively operate on dependencies Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});index.add({'id':16,'href':'/dud/cli/dud_stage/','title':"dud stage",'section':"CLI Reference",'content':"dud stage #  Commands for interacting with stages and the index\nSynopsis #  Stage is a group of sub-commands for interacting with stage and the index.\nOptions #   -h, --help help for stage Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t- dud stage add\t- Add one or more stage files to the stage index dud stage gen\t- Generate Stage YAML using the CLI  "});index.add({'id':17,'href':'/dud/cli/dud_stage_add/','title':"dud stage add",'section':"CLI Reference",'content':"dud stage add #  Add one or more stage files to the stage index\nSynopsis #  Add adds one or more stage files to the stage index.\nAdd loads each stage file passed on the command line, validates its contents, checks if it conflicts with any stages already in the index, then adds the stage to the index file.\ndud stage add stage_file... [flags] Options #   -h, --help help for add Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud stage\t- Commands for interacting with stages and the index  "});index.add({'id':18,'href':'/dud/cli/dud_stage_gen/','title':"dud stage gen",'section':"CLI Reference",'content':"dud stage gen #  Generate Stage YAML using the CLI\nSynopsis #  Gen generates a Stage YAML file and prints it to STDOUT.\nThe output of this command can be redirected to a file and modified further as needed.\ndud stage gen [flags] [--] [stage_command]... Examples #  dud stage gen -o data/ python download_data.py \u0026gt; download.yaml Options #   -d, --dep strings one or more dependent files or directories -h, --help help for gen -o, --out strings one or more output files or directories -w, --work-dir string working directory for the stage's command Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud stage\t- Commands for interacting with stages and the index  "});index.add({'id':19,'href':'/dud/cli/dud_status/','title':"dud status",'section':"CLI Reference",'content':"dud status #  Print the state of one or more stages\nSynopsis #  Status prints the state of one or more stages.\nFor each stage file passed in, status will print the current state of the stage. If no stage files are passed in, status will act on all stages in the index. By default, status will act recursively on all upstream stages (i.e. dependencies).\ndud status [flags] [stage_file]... Options #   -h, --help help for status Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});index.add({'id':20,'href':'/dud/cli/dud_version/','title':"dud version",'section':"CLI Reference",'content':"dud version #  Print version and exit\ndud version [flags] Options #   -h, --help help for version Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  "});})();