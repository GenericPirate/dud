'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/dud/docs/cli/dud/','title':"dud",'section':"CLI Reference",'content':"dud #  Synopsis #  Dud is a tool to for storing, versioning, and reproducing large files alongside source code.\nOptions #   -h, --help help for dud --profile enable profiling --trace enable tracing SEE ALSO #   dud checkout\t- Load committed artifacts from the cache dud checksum\t- Checksum files or bytes from STDIN dud commit\t- Save artifacts to the cache and record their checksums dud completion\t- Generate shell completion script dud config\t- Print or modify fields in the config file dud fetch\t- Fetch committed artifacts to the default remote cache dud gen-docs\t- Generate Markdown documentation for this command dud graph\t- Print stage graph in graphviz DOT format dud init\t- Initialize a Dud project dud push\t- Push committed artifacts to the default remote cache dud run\t- Run stages or pipelines dud stage\t- Commands for interacting with stages and the index dud status\t- Print the state of one or more stages dud version\t- Print version and exit  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':1,'href':'/dud/docs/cli/dud_checkout/','title':"dud checkout",'section':"CLI Reference",'content':"dud checkout #  Load committed artifacts from the cache\nSynopsis #  Checkout loads previously committed artifacts from the cache.\nFor each stage file passed in, checkout attempts to load all output artifacts from the cache for the given. If no stage files are passed in, checkout will act on all stages in the index. By default, checkout will act recursively on all upstream stages (i.e. dependencies).\ndud checkout [flags] [stage_file]... Options #   -c, --copy copy artifacts instead of linking -h, --help help for checkout -s, --single-stage don't recursively operate on dependencies Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':2,'href':'/dud/docs/cli/dud_checksum/','title':"dud checksum",'section':"CLI Reference",'content':"dud checksum #  Checksum files or bytes from STDIN\nSynopsis #  Checksum reads files (or bytes from STDIN) and prints their checksums.\nThe CLI is intended to be compatible with the *sum family of command-line tools (although this version is currently incomplete).\ndud checksum [flags] [file]... Options #   -b, --bufsize int internal buffer size in bytes -h, --help help for checksum Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':3,'href':'/dud/docs/cli/dud_commit/','title':"dud commit",'section':"CLI Reference",'content':"dud commit #  Save artifacts to the cache and record their checksums\nSynopsis #  Commit saves artifacts to the cache and record their checksums.\nFor each stage file passed in, commit saves all output artifacts in the cache and records their checksums in a stage lock file. If no stage files are passed in, commit will act on all stages in the index. By default, commit will act recursively on all upstream stages (i.e. dependencies).\ndud commit [flags] [stage_file]... Options #   -c, --copy On checkout, copy the file instead of linking. -h, --help help for commit Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':4,'href':'/dud/docs/cli/dud_completion/','title':"dud completion",'section':"CLI Reference",'content':"dud completion #  Generate shell completion script\nSynopsis #  To load completions:\nBash:\n$ source \u0026lt;(dud completion bash)\nTo load completions for each session, execute once: #  Linux: $ dud completion bash \u0026gt; /etc/bash_completion.d/dud MacOS: $ dud completion bash \u0026gt; /usr/local/etc/bash_completion.d/dud\nZsh:\nIf shell completion is not already enabled in your environment you will need #  to enable it. You can execute the following once: #  $ echo \u0026ldquo;autoload -U compinit; compinit\u0026rdquo; \u0026raquo; ~/.zshrc\nTo load completions for each session, execute once: #  $ dud completion zsh \u0026gt; \u0026ldquo;${fpath[1]}/_dud\u0026rdquo;\nYou will need to start a new shell for this setup to take effect. #  Fish:\n$ dud completion fish | source\nTo load completions for each session, execute once: #  $ dud completion fish \u0026gt; ~/.config/fish/completions/dud.fish\ndud completion {bash|zsh|fish} Options #   -h, --help help for completion Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':5,'href':'/dud/docs/cli/dud_config/','title':"dud config",'section':"CLI Reference",'content':"dud config #  Print or modify fields in the config file\nSynopsis #  Config prints or modifies fields in the config file\nOptions #   -h, --help help for config Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t- dud config get\t- Get the value of a field in the config file dud config set\t- Set the value of a field in the config file  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':6,'href':'/dud/docs/cli/dud_config_get/','title':"dud config get",'section':"CLI Reference",'content':"dud config get #  Get the value of a field in the config file\nSynopsis #  Get the value of a field in the config file\ndud config get config_field [flags] Options #   -h, --help help for get Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud config\t- Print or modify fields in the config file  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':7,'href':'/dud/docs/cli/dud_config_set/','title':"dud config set",'section':"CLI Reference",'content':"dud config set #  Set the value of a field in the config file\nSynopsis #  Set the value of a field in the config file\ndud config set config_field new_value [flags] Options #   -h, --help help for set Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud config\t- Print or modify fields in the config file  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':8,'href':'/dud/docs/cli/dud_fetch/','title':"dud fetch",'section':"CLI Reference",'content':"dud fetch #  Fetch committed artifacts to the default remote cache\nSynopsis #  Fetch downloads previously committed artifacts from a remote cache.\nFor each stage passed in, fetch downloads the stage\u0026rsquo;s committed outputs from the remote cache specified in the Dud config file. If no stage files are passed in, fetch will act on all stages in the index. By default, fetch will act recursively on all upstream stages (i.e. dependencies).\ndud fetch [flags] [stage_file]... Options #   -h, --help help for fetch -s, --single-stage don't recursively operate on dependencies Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':9,'href':'/dud/docs/cli/dud_gen-docs/','title':"dud gen-docs",'section':"CLI Reference",'content':"dud gen-docs #  Generate Markdown documentation for this command\ndud gen-docs [flags] Options #   -h, --help help for gen-docs Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':10,'href':'/dud/docs/cli/dud_graph/','title':"dud graph",'section':"CLI Reference",'content':"dud graph #  Print stage graph in graphviz DOT format\nSynopsis #  Graph prints the stage graph in graphviz DOT format.\nFor each stage file passed in, graph will print the graph of the stage and all upstream stages. If no stage files are passed in, graph will act on all stages in the index.\nYou can pipe the output of this command to \u0026lsquo;dot\u0026rsquo; from the graphviz package to generate images of the stage graph. For example:\ndud graph | dot -Tpng -o dud.png\ndud graph [flags] [stage_file]... Options #   -h, --help help for graph --stages-only only show stages; no artifacts Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':11,'href':'/dud/docs/cli/dud_init/','title':"dud init",'section':"CLI Reference",'content':"dud init #  Initialize a Dud project\nSynopsis #  Init initializes a Dud project in the current directory.\ndud init [flags] Options #   -h, --help help for init Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':12,'href':'/dud/docs/cli/dud_push/','title':"dud push",'section':"CLI Reference",'content':"dud push #  Push committed artifacts to the default remote cache\nSynopsis #  Push uploads previously committed artifacts to a remote cache.\nFor each stage passed in, push uploads the stage\u0026rsquo;s committed outputs to the remote cache specified in the Dud config file. If no stage files are passed in, push will act on all stages in the index. By default, push will act recursively on all upstream stages (i.e. dependencies).\ndud push [flags] [stage_file]... Options #   -h, --help help for push -s, --single-stage don't recursively operate on dependencies Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':13,'href':'/dud/docs/cli/dud_run/','title':"dud run",'section':"CLI Reference",'content':"dud run #  Run stages or pipelines\nSynopsis #  Run runs stages or pipelines.\nFor each stage passed in, run executes a stage\u0026rsquo;s command if it is out-of-date. If no stage files are passed in, run will act on all stages in the index. By default, run will act recursively on all upstream stages (i.e. dependencies), and thus run will execute a stage\u0026rsquo;s command if any upstream stages are out-of-date.\ndud run [flags] [stage_file]... Options #   -h, --help help for run -s, --single-stage don't recursively operate on dependencies Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':14,'href':'/dud/docs/cli/dud_stage/','title':"dud stage",'section':"CLI Reference",'content':"dud stage #  Commands for interacting with stages and the index\nSynopsis #  Stage is a group of sub-commands for interacting with stage and the index.\nOptions #   -h, --help help for stage Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t- dud stage add\t- Add one or more stage files to the stage index dud stage new\t- Create a stage from the command-line and print it  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':15,'href':'/dud/docs/cli/dud_stage_add/','title':"dud stage add",'section':"CLI Reference",'content':"dud stage add #  Add one or more stage files to the stage index\nSynopsis #  Add adds one or more stage files to the stage index.\nAdd loads each stage file passed on the command line, validates its contents, checks if it conflicts with any stages already in the index, then adds the stage to the index file.\ndud stage add stage_file... [flags] Options #   -h, --help help for add Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud stage\t- Commands for interacting with stages and the index  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':16,'href':'/dud/docs/cli/dud_stage_new/','title':"dud stage new",'section':"CLI Reference",'content':"dud stage new #  Create a stage from the command-line and print it\nSynopsis #  Stage creates a stage from the command-line and prints it to STDOUT.\nThe output of this command can be redirected to a file and modified further as needed. For example:\ndud stage -o data/ python download_data.py \u0026gt; download.yaml\ndud stage new [flags] Options #   -d, --dep strings one or more dependent files or directories -h, --help help for new -o, --out strings one or more output files or directories -w, --work-dir string working directory for the stage's command Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud stage\t- Commands for interacting with stages and the index  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':17,'href':'/dud/docs/cli/dud_status/','title':"dud status",'section':"CLI Reference",'content':"dud status #  Print the state of one or more stages\nSynopsis #  Status prints the state of one or more stages.\nFor each stage file passed in, status will print the current state of the stage. If no stage files are passed in, status will act on all stages in the index. By default, status will act recursively on all upstream stages (i.e. dependencies).\ndud status [flags] [stage_file]... Options #   -h, --help help for status Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});index.add({'id':18,'href':'/dud/docs/cli/dud_version/','title':"dud version",'section':"CLI Reference",'content':"dud version #  Print version and exit\ndud version [flags] Options #   -h, --help help for version Options inherited from parent commands #   --profile enable profiling --trace enable tracing SEE ALSO #   dud\t-  Auto generated by spf13/cobra on 1-Dec-2020 #  "});})();