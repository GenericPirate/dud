<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CLI Reference on Dud</title><link>https://kevin-hanselman.github.io/dud/docs/cli/</link><description>Recent content in CLI Reference on Dud</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kevin-hanselman.github.io/dud/docs/cli/index.xml" rel="self" type="application/rss+xml"/><item><title>dud</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud/</guid><description>dud # Synopsis # Dud is a tool to for storing, versioning, and reproducing large files alongside source code.
Options # -h, --help help for dud --profile enable profiling --trace enable tracing SEE ALSO # dud checkout - Load committed artifacts from the cache dud checksum - Checksum files or bytes from STDIN dud commit - Save artifacts to the cache and record their checksums dud completion - Generate shell completion script dud config - Print or modify fields in the config file dud fetch - Fetch committed artifacts to the default remote cache dud graph - Print stage graph in graphviz DOT format dud init - Initialize a Dud project dud push - Push committed artifacts to the default remote cache dud run - Run stages or pipelines dud stage - Commands for interacting with stages and the index dud status - Print the state of one or more stages dud version - Print version and exit Auto generated by spf13/cobra on 2-Dec-2020 #</description></item><item><title>dud checkout</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_checkout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_checkout/</guid><description>dud checkout # Load committed artifacts from the cache
Synopsis # Checkout loads previously committed artifacts from the cache.
For each stage file passed in, checkout attempts to load all output artifacts from the cache for the given. If no stage files are passed in, checkout will act on all stages in the index. By default, checkout will act recursively on all upstream stages (i.e. dependencies).
dud checkout [flags] [stage_file].</description></item><item><title>dud checksum</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_checksum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_checksum/</guid><description>dud checksum # Checksum files or bytes from STDIN
Synopsis # Checksum reads files (or bytes from STDIN) and prints their checksums.
The CLI is intended to be compatible with the *sum family of command-line tools (although this version is currently incomplete).
dud checksum [flags] [file]... Options # -b, --bufsize int internal buffer size in bytes -h, --help help for checksum Options inherited from parent commands # --profile enable profiling --trace enable tracing SEE ALSO # dud - Auto generated by spf13/cobra on 2-Dec-2020 #</description></item><item><title>dud commit</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_commit/</guid><description>dud commit # Save artifacts to the cache and record their checksums
Synopsis # Commit saves artifacts to the cache and record their checksums.
For each stage file passed in, commit saves all output artifacts in the cache and records their checksums in a stage lock file. If no stage files are passed in, commit will act on all stages in the index. By default, commit will act recursively on all upstream stages (i.</description></item><item><title>dud completion</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_completion/</guid><description>dud completion # Generate shell completion script
Synopsis # To load completions:
Bash:
$ source &amp;lt;(dud completion bash)
To load completions for each session, execute once: # Linux: $ dud completion bash &amp;gt; /etc/bash_completion.d/dud MacOS: $ dud completion bash &amp;gt; /usr/local/etc/bash_completion.d/dud
Zsh:
If shell completion is not already enabled in your environment you will need # to enable it. You can execute the following once: # $ echo &amp;ldquo;autoload -U compinit; compinit&amp;rdquo; &amp;raquo; ~/.</description></item><item><title>dud config</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_config/</guid><description>dud config # Print or modify fields in the config file
Synopsis # Config prints or modifies fields in the config file
Options # -h, --help help for config Options inherited from parent commands # --profile enable profiling --trace enable tracing SEE ALSO # dud - dud config get - Get the value of a field in the config file dud config set - Set the value of a field in the config file Auto generated by spf13/cobra on 2-Dec-2020 #</description></item><item><title>dud config get</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_config_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_config_get/</guid><description>dud config get # Get the value of a field in the config file
Synopsis # Get the value of a field in the config file
dud config get config_field [flags] Options # -h, --help help for get Options inherited from parent commands # --profile enable profiling --trace enable tracing SEE ALSO # dud config - Print or modify fields in the config file Auto generated by spf13/cobra on 2-Dec-2020 #</description></item><item><title>dud config set</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_config_set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_config_set/</guid><description>dud config set # Set the value of a field in the config file
Synopsis # Set the value of a field in the config file
dud config set config_field new_value [flags] Options # -h, --help help for set Options inherited from parent commands # --profile enable profiling --trace enable tracing SEE ALSO # dud config - Print or modify fields in the config file Auto generated by spf13/cobra on 2-Dec-2020 #</description></item><item><title>dud fetch</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_fetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_fetch/</guid><description>dud fetch # Fetch committed artifacts to the default remote cache
Synopsis # Fetch downloads previously committed artifacts from a remote cache.
For each stage passed in, fetch downloads the stage&amp;rsquo;s committed outputs from the remote cache specified in the Dud config file. If no stage files are passed in, fetch will act on all stages in the index. By default, fetch will act recursively on all upstream stages (i.</description></item><item><title>dud graph</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_graph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_graph/</guid><description>dud graph # Print stage graph in graphviz DOT format
Synopsis # Graph prints the stage graph in graphviz DOT format.
For each stage file passed in, graph will print the graph of the stage and all upstream stages. If no stage files are passed in, graph will act on all stages in the index.
You can pipe the output of this command to &amp;lsquo;dot&amp;rsquo; from the graphviz package to generate images of the stage graph.</description></item><item><title>dud init</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_init/</guid><description>dud init # Initialize a Dud project
Synopsis # Init initializes a Dud project in the current directory.
dud init [flags] Options # -h, --help help for init Options inherited from parent commands # --profile enable profiling --trace enable tracing SEE ALSO # dud - Auto generated by spf13/cobra on 2-Dec-2020 #</description></item><item><title>dud push</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_push/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_push/</guid><description>dud push # Push committed artifacts to the default remote cache
Synopsis # Push uploads previously committed artifacts to a remote cache.
For each stage passed in, push uploads the stage&amp;rsquo;s committed outputs to the remote cache specified in the Dud config file. If no stage files are passed in, push will act on all stages in the index. By default, push will act recursively on all upstream stages (i.</description></item><item><title>dud run</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_run/</guid><description>dud run # Run stages or pipelines
Synopsis # Run runs stages or pipelines.
For each stage passed in, run executes a stage&amp;rsquo;s command if it is out-of-date. If no stage files are passed in, run will act on all stages in the index. By default, run will act recursively on all upstream stages (i.e. dependencies), and thus run will execute a stage&amp;rsquo;s command if any upstream stages are out-of-date.</description></item><item><title>dud stage</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_stage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_stage/</guid><description>dud stage # Commands for interacting with stages and the index
Synopsis # Stage is a group of sub-commands for interacting with stage and the index.
Options # -h, --help help for stage Options inherited from parent commands # --profile enable profiling --trace enable tracing SEE ALSO # dud - dud stage add - Add one or more stage files to the stage index dud stage new - Create a stage from the command-line and print it Auto generated by spf13/cobra on 2-Dec-2020 #</description></item><item><title>dud stage add</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_stage_add/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_stage_add/</guid><description>dud stage add # Add one or more stage files to the stage index
Synopsis # Add adds one or more stage files to the stage index.
Add loads each stage file passed on the command line, validates its contents, checks if it conflicts with any stages already in the index, then adds the stage to the index file.
dud stage add stage_file... [flags] Options # -h, --help help for add Options inherited from parent commands # --profile enable profiling --trace enable tracing SEE ALSO # dud stage - Commands for interacting with stages and the index Auto generated by spf13/cobra on 2-Dec-2020 #</description></item><item><title>dud stage new</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_stage_new/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_stage_new/</guid><description>dud stage new # Create a stage from the command-line and print it
Synopsis # Stage creates a stage from the command-line and prints it to STDOUT.
The output of this command can be redirected to a file and modified further as needed. For example:
dud stage -o data/ python download_data.py &amp;gt; download.yaml
dud stage new [flags] Options # -d, --dep strings one or more dependent files or directories -h, --help help for new -o, --out strings one or more output files or directories -w, --work-dir string working directory for the stage's command Options inherited from parent commands # --profile enable profiling --trace enable tracing SEE ALSO # dud stage - Commands for interacting with stages and the index Auto generated by spf13/cobra on 2-Dec-2020 #</description></item><item><title>dud status</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_status/</guid><description>dud status # Print the state of one or more stages
Synopsis # Status prints the state of one or more stages.
For each stage file passed in, status will print the current state of the stage. If no stage files are passed in, status will act on all stages in the index. By default, status will act recursively on all upstream stages (i.e. dependencies).
dud status [flags] [stage_file].</description></item><item><title>dud version</title><link>https://kevin-hanselman.github.io/dud/docs/cli/dud_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/docs/cli/dud_version/</guid><description>dud version # Print version and exit
dud version [flags] Options # -h, --help help for version Options inherited from parent commands # --profile enable profiling --trace enable tracing SEE ALSO # dud - Auto generated by spf13/cobra on 2-Dec-2020 #</description></item></channel></rss>