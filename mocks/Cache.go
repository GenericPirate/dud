// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	artifact "github.com/kevlar1818/duc/artifact"

	mock "github.com/stretchr/testify/mock"

	strategy "github.com/kevlar1818/duc/strategy"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: workingDir, art, strat
func (_m *Cache) Checkout(workingDir string, art *artifact.Artifact, strat strategy.CheckoutStrategy) error {
	ret := _m.Called(workingDir, art, strat)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *artifact.Artifact, strategy.CheckoutStrategy) error); ok {
		r0 = rf(workingDir, art, strat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields: workingDir, art, strat
func (_m *Cache) Commit(workingDir string, art *artifact.Artifact, strat strategy.CheckoutStrategy) error {
	ret := _m.Called(workingDir, art, strat)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *artifact.Artifact, strategy.CheckoutStrategy) error); ok {
		r0 = rf(workingDir, art, strat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PathForChecksum provides a mock function with given fields: checksum
func (_m *Cache) PathForChecksum(checksum string) (string, error) {
	ret := _m.Called(checksum)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(checksum)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(checksum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: workingDir, art
func (_m *Cache) Status(workingDir string, art artifact.Artifact) (artifact.Status, error) {
	ret := _m.Called(workingDir, art)

	var r0 artifact.Status
	if rf, ok := ret.Get(0).(func(string, artifact.Artifact) artifact.Status); ok {
		r0 = rf(workingDir, art)
	} else {
		r0 = ret.Get(0).(artifact.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, artifact.Artifact) error); ok {
		r1 = rf(workingDir, art)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
