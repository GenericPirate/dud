// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	cache "github.com/kevlar1818/duc/cache"
	mock "github.com/stretchr/testify/mock"

	stage "github.com/kevlar1818/duc/stage"

	strategy "github.com/kevlar1818/duc/strategy"
)

// Stager is an autogenerated mock type for the Stager type
type Stager struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: _a0, strat
func (_m *Stager) Checkout(_a0 cache.Cache, strat strategy.CheckoutStrategy) error {
	ret := _m.Called(_a0, strat)

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Cache, strategy.CheckoutStrategy) error); ok {
		r0 = rf(_a0, strat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields: _a0, strat
func (_m *Stager) Commit(_a0 cache.Cache, strat strategy.CheckoutStrategy) error {
	ret := _m.Called(_a0, strat)

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Cache, strategy.CheckoutStrategy) error); ok {
		r0 = rf(_a0, strat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FromFile provides a mock function with given fields: path
func (_m *Stager) FromFile(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields: _a0
func (_m *Stager) Status(_a0 cache.Cache) (stage.Status, error) {
	ret := _m.Called(_a0)

	var r0 stage.Status
	if rf, ok := ret.Get(0).(func(cache.Cache) stage.Status); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stage.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(cache.Cache) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToFile provides a mock function with given fields: path
func (_m *Stager) ToFile(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
