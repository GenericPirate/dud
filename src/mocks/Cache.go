// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	agglog "github.com/kevin-hanselman/dud/src/agglog"
	artifact "github.com/kevin-hanselman/dud/src/artifact"

	mock "github.com/stretchr/testify/mock"

	strategy "github.com/kevin-hanselman/dud/src/strategy"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: workDir, art, s
func (_m *Cache) Checkout(workDir string, art artifact.Artifact, s strategy.CheckoutStrategy) error {
	ret := _m.Called(workDir, art, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, artifact.Artifact, strategy.CheckoutStrategy) error); ok {
		r0 = rf(workDir, art, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields: workDir, art, s, l
func (_m *Cache) Commit(workDir string, art *artifact.Artifact, s strategy.CheckoutStrategy, l *agglog.AggLogger) error {
	ret := _m.Called(workDir, art, s, l)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *artifact.Artifact, strategy.CheckoutStrategy, *agglog.AggLogger) error); ok {
		r0 = rf(workDir, art, s, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: workDir, remoteSrc, art
func (_m *Cache) Fetch(workDir string, remoteSrc string, art artifact.Artifact) error {
	ret := _m.Called(workDir, remoteSrc, art)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, artifact.Artifact) error); ok {
		r0 = rf(workDir, remoteSrc, art)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PathForChecksum provides a mock function with given fields: checksum
func (_m *Cache) PathForChecksum(checksum string) (string, error) {
	ret := _m.Called(checksum)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(checksum)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(checksum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Push provides a mock function with given fields: workDir, remoteDst, art
func (_m *Cache) Push(workDir string, remoteDst string, art artifact.Artifact) error {
	ret := _m.Called(workDir, remoteDst, art)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, artifact.Artifact) error); ok {
		r0 = rf(workDir, remoteDst, art)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields: workDir, art
func (_m *Cache) Status(workDir string, art artifact.Artifact) (artifact.ArtifactWithStatus, error) {
	ret := _m.Called(workDir, art)

	var r0 artifact.ArtifactWithStatus
	if rf, ok := ret.Get(0).(func(string, artifact.Artifact) artifact.ArtifactWithStatus); ok {
		r0 = rf(workDir, art)
	} else {
		r0 = ret.Get(0).(artifact.ArtifactWithStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, artifact.Artifact) error); ok {
		r1 = rf(workDir, art)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
